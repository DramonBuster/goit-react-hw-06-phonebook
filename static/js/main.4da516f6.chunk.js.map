{"version":3,"sources":["redux/contacts/contacts-action.js","redux/contacts/contacts-reducer.js","redux/store.js","Components/Filter/Filter.js","Components/ContactListItem/ContactListItem.js","Components/ContactList/ContactList.js","Components/ContactForm/ContactForm.js","Components/Phonebook/Phonebook.js","App.js","reportWebVitals.js","index.js"],"names":["addContact","createAction","deleteContact","filterContact","items","createReducer","data","state","payload","filter","id","_","combineReducers","middleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","persistConfig","key","storage","rootReducer","contacts","contactsReducer","persistedReducer","persistReducer","store","configureStore","reducer","getDefaultMiddleware","concat","logger","devTools","process","persistor","persistStore","FormItem","styled","label","FormInput","input","FormHeading","h3","Filter","value","useSelector","dispatch","useDispatch","type","onChange","event","actions","target","ItemWrapper","div","ContactInfo","p","ContactName","span","ContactNumber","DeleteButton","button","ContactListItem","contact","name","number","onClick","List","ul","ContactList","allContacts","normilizedFilter","toLowerCase","includes","trim","getCurrentPhonebook","map","FormWrapper","form","FormLabel","FormTitle","FormButton","ContactForm","onAddContact","useState","setName","setNumber","changeState","currentTarget","reset","onSubmit","preventDefault","pattern","title","required","Wrapper","Heading","h1","SubHeading","h2","Phonebook","Container","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.4da516f6.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const addContact = createAction('contact/Add');\r\nexport const deleteContact = createAction('contact/Delete');\r\nexport const filterContact = createAction('contact/Filter');","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport data from '../../data/contacts.json';\r\nimport { addContact, deleteContact, filterContact } from './contacts-action';\r\n\r\nconst items = createReducer(data, {\r\n    [addContact]: (state, {payload}) => [payload, ...state],\r\n    [deleteContact]: (state, {payload}) =>\r\n        state.filter(({id}) => id !== payload)\r\n})\r\n\r\nconst filter = createReducer('', {\r\n   [filterContact]:(_, {payload}) => payload, \r\n})\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter\r\n});","import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\r\nimport logger from 'redux-logger';\r\nimport {\r\n    persistStore,\r\n    persistReducer,\r\n    FLUSH,\r\n    REHYDRATE,\r\n    PAUSE,\r\n    PERSIST,\r\n    PURGE,\r\n    REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport contactsReducer from './contacts/contacts-reducer';\r\n\r\nconst middleware = {\r\n    serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n};\r\n\r\nconst persistConfig = {\r\n    key: 'contacts',\r\n    storage\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n    contacts: contactsReducer,\r\n})\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer)\r\n\r\nconst store = configureStore({\r\n    reducer: persistedReducer, \r\n    middleware: getDefaultMiddleware => getDefaultMiddleware(middleware).concat(logger),\r\n    devTools: process.env.NODE_ENV === 'development',\r\n})\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };","import { useSelector, useDispatch } from 'react-redux';\nimport * as actions from '../../redux/contacts/contacts-action'\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst FormItem = styled.label`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n\n  font-weight: 600;\n  color: black;\n`;\n\nconst FormInput = styled.input`\n  width: 200px;\n  border-radius: 3px;\n  border: solid 2px black;\n  margin-bottom: 20px;\n\n  :focus {\n    outline: none;\n    box-shadow: 0px 0px 1px 1px blue;\n    border: solid 1px black;\n  }\n`;\n\nconst FormHeading = styled.h3`\n  margin-bottom: 10px;\n`;\n\n// export default function Filter(value, onChange) {\n  \n//   return (\n//     <FormItem>\n//       <FormHeading>Find contacts by name</FormHeading>\n//       <FormInput type=\"text\" value={value} onChange={onChange} />\n//     </FormItem>\n//   )\n// }\n\nexport default function Filter() {\n  const value = useSelector(state => state.contacts.filter);\n  const dispatch = useDispatch();\n  const onChange = event => dispatch(actions.filterContact(event.target.value))\n\n  return (\n    <FormItem>\n      <FormHeading>Find contacts by name</FormHeading>\n      <FormInput type=\"text\" value={value} onChange={onChange} />\n    </FormItem>\n  )\n}\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport * as actions from '../../redux/contacts/contacts-action'\nimport styled from 'styled-components';\n\nconst ItemWrapper = styled.div`\n  display: flex;\n  justify-content: space-between;\n  margin-bottom: 20px;\n`;\n\nconst ContactInfo = styled.p`\n  margin-right: 25px;\n`;\n\nconst ContactName = styled.span`\n  margin-right: 15px;\n`;\n\nconst ContactNumber = styled.span`\n  font-style: italic;\n`;\n\nconst DeleteButton = styled.button`\n  padding: 2px 4px;\n  width: 100px;\n\n  cursor: pointer;\n  color: black;\n  border: solid 1px black;\n  background-color: white;\n  border-radius: 4px;\n\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 1.475;\n  align-items: center;\n  text-align: center;\n\n  :hover {\n    color: white;\n    background-color: red;\n  }\n`;\n\n// const ContactListItem = ({ contact, onDeleteContact }) => (\n//   <ItemWrapper>\n//     <ContactInfo>\n//       <ContactName>{contact.name}</ContactName>\n//       <ContactNumber>{contact.number}</ContactNumber>\n//     </ContactInfo>\n//     <DeleteButton onClick={() => onDeleteContact(contact.id)}>\n//       Delete\n//     </DeleteButton>\n//   </ItemWrapper>\n// );\n\nexport default function ContactListItem({ contact }) {\n  const dispatch = useDispatch();\n  return (\n    <ItemWrapper>\n      <ContactInfo>\n        <ContactName>{contact.name}</ContactName>\n        <ContactNumber>{contact.number}</ContactNumber>\n      </ContactInfo>\n      <DeleteButton onClick={() => dispatch(actions.deleteContact(contact.id))}>Delete</DeleteButton>\n    </ItemWrapper>\n  )\n}\n\nContactListItem.propTypes = {\n  contact: PropTypes.shape({\n    id: PropTypes.string.isRequired,\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n  }),\n  // onDeleteContact: PropTypes.func.isRequired,\n};\n\n","import PropTypes from 'prop-types';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport ContactListItem from '../ContactListItem/ContactListItem';\n\nconst List = styled.ul`\n  width: 400px;\n`;\n\n// const ContactList = ({ contacts, onDeleteContact }) => (\n//   <List>\n//     {contacts.map(contact => (\n//       <li key={contact.id}>\n//         <ContactListItem contact={contact} onDeleteContact={onDeleteContact} />\n//       </li>\n//     ))}\n//   </List>\n// ); \n\nconst getCurrentPhonebook = (allContacts, filter) => {\n  const normilizedFilter = filter.toLowerCase();\n  return allContacts.filter(contact =>\n    contact.name.toLowerCase().includes(normilizedFilter.trim())\n  );\n}\n\nexport default function ContactList() {\n  const contacts = useSelector(({contacts:{items, filter}}) => getCurrentPhonebook(items, filter))\n\n  return (\n    <List>\n     {contacts.map(contact => (\n        <li key={contact.id}>\n          <ContactListItem contact={contact} />\n        </li>\n      ))}\n    </List>\n  )\n}\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n    }),\n  ),\n};\n\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport * as actions from '../../redux/contacts/contacts-action'\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst FormWrapper = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  padding: 30px 30px;\n\n  margin-bottom: 20px;\n  border: solid 1px black;\n  border-radius: 5px;\n`;\n\nconst FormLabel = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 15px;\n\n  font-weight: 600;\n  color: black;\n`;\n\nconst FormTitle = styled.h3`\n  margin-bottom: 10px;\n`;\n\nconst FormInput = styled.input`\n  border-radius: 3px;\n  border: solid 2px black;\n  :focus {\n    outline: none;\n    box-shadow: 0px 0px 3px 3px blue;\n    border: solid 1px black;\n  }\n`;\n\nconst FormButton = styled.button`\n  padding: 2px 4px;\n  width: 120px;\n\n  cursor: pointer;\n  color: black;\n  background-color: white;\n  border-radius: 4px;\n  border: solid 1px black;\n\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 1.875;\n  align-items: center;\n  text-align: center;\n\n  :hover {\n    color: white;\n    background-color: lightgreen;\n  }\n`;\n\nexport default function ContactForm({ onAddContact }) {\n  const dispatch = useDispatch();\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const changeState = event => {\n    const { name, value } = event.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        return;\n    }\n  };\n\n  const contactSubmit = event => {\n    event.preventDefault();\n    dispatch(actions.addContact({name, number}))\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <FormWrapper onSubmit={contactSubmit}>\n      <FormLabel>\n        <FormTitle>Name</FormTitle>\n        <FormInput\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={changeState}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </FormLabel>\n      <FormLabel>\n        <FormTitle>Number</FormTitle>\n        <FormInput\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={changeState}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </FormLabel>\n      <FormButton type=\"submit\">Add contact</FormButton>\n    </FormWrapper>\n  );\n}\n\nContactForm.propTypes = {\n  onAddContact: PropTypes.func,\n};\n","// import { useMemo } from 'react';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { nanoid } from 'nanoid';\nimport styled from 'styled-components';\n// import data from '../../data/contacts.json';\nimport Filter from '../Filter/Filter';\nimport ContactList from '../ContactList/ContactList';\nimport ContactForm from '../ContactForm/ContactForm';\n// import * as actions from '../../redux/contacts/contacts-action';\n\nconst Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: venter;\n  margin-bottom: 30px;\n\n  :last-child {\n    margin-bottom: 0px;\n  }\n`;\n\nconst Heading = styled.h1`\n  margin-bottom: 20px;\n  font-size: 36px;\n  text-align: center;\n`;\n\nconst SubHeading = styled.h2`\n  margin-bottom: 20px;\n  font-size: 30px;\n  text-align: center;\n`;\n\nexport default function Phonebook() {\n  // const dispatch = useDispatch();\n  // const contacts = useSelector(state => state.items);\n  // const filter = useSelector(state => state.filter);\n\n  // const changeFilter = event => {\n  //   dispatch(actions.filterContact(event.target.value));\n  // };\n\n  // const addContact = ({ name, number }) => {\n  //   const contact = {\n  //     id: nanoid(),\n  //     name,\n  //     number,\n  //   };\n\n  //   if (\n  //     contacts.find(\n  //       contact => contact.name.toLowerCase() === name.toLowerCase(),\n  //     )\n  //   ) {\n  //     alert(`${name} is already in contacts`);\n  //     return;\n  //   }\n\n  //   dispatch(actions.addContact(contact));\n  // };\n\n  // const deleteContact = contactId => {\n  //   setContacts(contacts.filter(contact => contact.id !== contactId));\n  // };\n\n  // const deleteContact = event => {\n  //   dispatch(\n  //     actions.deleteContact(\n  //       contacts.filter(\n  //         element =>\n  //           element.name !==\n  //           event.target.parentNode.childNodes[2].nodeValue.trim(),\n  //       ),\n  //     ),\n  //   );\n  //   dispatch(actions.filterContact(''));\n  // };\n\n  // const normalizedFilter = useMemo(() => filter.toLowerCase(), [filter]);\n\n  // const getCurrentPhonebook = () => {\n  //   return contacts.filter(contact =>\n  //     contact.name.toLowerCase().includes(normalizedFilter.trim()),\n  //   );\n  // };\n\n  // useEffect(() => {\n  //   const contacts = localStorage.getItem('contacts');\n  //   const parsedContacts = JSON.parse(contacts);\n  //   if (parsedContacts) {\n  //     setContacts(parsedContacts);\n  //   }\n  // }, []);\n\n  // useEffect(() => {\n  //   window.localStorage.setItem('contacts', JSON.stringify(contacts));\n  // }, [contacts]);\n\n  // const contactList = normalizedFilter ? getCurrentPhonebook() : contacts;\n\n  return (\n    <Wrapper>\n      <Heading>Phonebook</Heading>\n      <ContactForm />\n      <SubHeading>Contacts</SubHeading>\n      <Filter />\n      <ContactList\n      />\n    </Wrapper>\n  );\n}\n","import styled from 'styled-components';\nimport Phonebook from './Components/Phonebook/Phonebook';\n\nconst Container = styled.div`\n  margin: 0 auto;\n  padding: 0 15px;\n  width: 430px;\n`;\n\nfunction App() {\n  return (\n    <Container>\n      <Phonebook />\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport store from './redux/store';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}